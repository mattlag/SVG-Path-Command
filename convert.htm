<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>SVG Path Command - Converter Tool</title>
	<script src="svg-path-command.js"></script>
	<script>
		var _UI = {
			fileContents: `<?xml version="1.0" encoding="utf-8"?>
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="300px" height="300px" viewBox="0 0 300 300" style="enable-background:new 0 0 300 300;" xml:space="preserve">
<g>
	<path fill="#FFEEBB" d="M15,150 A115,115,180,1,1,285,150,115,115,180,1,1,15,150"/>
</g>
<g>
	<path d="M150,10 C72.7,10,10,72.7,10,150 s62.7,140,140,140 s140-62.7,140-140 S227.3,10,150,10z M150,280 c-71.8,0-130-58.2-130-130 S78.2,20,150,20 s130,58.2,130,130 S221.8,280,150,280z"/>
</g>
<g>
	<path d="M123.7,112.9 c-3.3,0-6-2.7-6-6 c0-10.1-8.2-18.4-18.4-18.4 S81,96.8,81,106.9 c0,3.3-2.7,6-6,6 s-6-2.7-6-6 c0-16.7,13.6-30.4,30.4-30.4 s30.4,13.6,30.4,30.4 C129.7,110.3,127,112.9,123.7,112.9z"/>
	<path d="M225,112.9 c-3.3,0-6-2.7-6-6 c0-10.1-8.2-18.4-18.4-18.4 s-18.4,8.2-18.4,18.4 c0,3.3-2.7,6-6,6 s-6-2.7-6-6 c0-16.7,13.6-30.4,30.4-30.4 S231,90.2,231,106.9 C231,110.3,228.3,112.9,225,112.9z"/>
</g>
<g>
	<path fill="white" d="M51,167 l198-1 l-32,66 l-69,26 l-67-28"/>
	<path d="M49,159 c0,55.5,45.5,100.4,101,100.4 s101-45,101-100.4H49z M150,248.4 c-48,0-87-35.3-87-78.9 c22.3,0,132.6,0,174,0 C237,213.1,198,248.4,150,248.4z"/>
</g>
</svg>`,
			postSource: ''
		};

		function main(){
			let target = document.getElementById('target');
			target.innerHTML = `
				<div id="pre">
					<div id="pre-img" class="post-img">${_UI.fileContents}</div>
					<textarea id="pre-src"></textarea>
				</div>
				<div id="post">
					<div id="post-img" class="post-img"></div>
					<textarea id="post-src"></textarea>
				</div>
			`;

			document.getElementById(`pre-src`).innerHTML = _UI.fileContents;
			_UI.postSource = convertSVGDocument(_UI.fileContents, getOptions());
			document.getElementById(`post-img`).innerHTML = _UI.postSource;
			document.getElementById(`post-src`).innerHTML = _UI.postSource;
		}

		function refresh() {
			_UI.postSource = convertSVGDocument(_UI.fileContents, getOptions());
			document.getElementById(`post-img`).innerHTML = _UI.postSource;
			document.getElementById(`post-src`).innerHTML = _UI.postSource;
		}

		function getOptions(){
			return {
				addLineBreaks: document.getElementById('check-addLineBreaks').checked,
				splitChains: document.getElementById('check-splitChains').checked,
				convertLines: document.getElementById('check-convertLines').checked,
				convertSmooth: document.getElementById('check-convertSmooth').checked,
				convertQuadraticToCubic: document.getElementById('check-convertQuadraticToCubic').checked,
				convertArcToCubic: document.getElementById('check-convertArcToCubic').checked,
				correctFloatingPoint: document.getElementById('check-correctFloatingPoint').checked
			};
		}

		function toggleView(page){
			console.log(`toggleView to ${page}`);
			if(page === "converted") {
				document.getElementById('pre').style.display = 'none';
				document.getElementById('post').style.display = 'grid';
				document.getElementById('toggle-original').removeAttribute('selected');
				document.getElementById('toggle-converted').setAttribute('selected', 'selected');
			} else {
				document.getElementById('pre').style.display = 'grid';
				document.getElementById('post').style.display = 'none';
				document.getElementById('toggle-original').setAttribute('selected', 'selected');
				document.getElementById('toggle-converted').removeAttribute('selected');
			}
		}
	</script>
	<style>
		* {
			padding: 0;
			margin: 0;
			box-sizing: border-box;
			font-family: Verdana, Geneva, Tahoma, sans-serif;
		}

		body {
			padding: 20px;
		}

		h1, h2, h3 {
			margin-bottom: 20px;
			font-weight: normal;
		}

		div {
			margin-bottom: 20px;
			color: hsl(0, 0%, 20%)
		}

		pre {
			display: inline-block;
			font-family: 'Cascadia Code', Consolas, monospace;
			background-color: hsl(0, 0%, 90%);
			color: black;
			border-radius: 3px;
			padding: 2px 4px;
			margin: 0px 4px;
		}

		#pre, #post {
			display: grid;
			grid-template-columns: 300px 1fr;
			column-gap: 20px;
			padding-top: 40px;
		}
		
		#pre {
			display: none;
		}

		#pre-img, #post-img {
			display: inline-block;
		}

		.option {
			display: inline-block;
		}
		
		button {
			color: hsl(194, 100%, 10%);
			background-color: white;
			border-style: solid;
			border-width: 1px;
			border-color: hsl(194, 100%, 50%);
			padding: 4px 8px;
			font-size: 1.2em;
			margin-right: -1px;
		}

		button:hover {
			cursor: pointer;
		}

		button[selected]{
			color: hsl(194, 100%, 10%);
			background-color: hsl(194, 100%, 50%);
		}

		button[selected]:hover {
			cursor: normal;
		}

		textarea {
			display: inline-block;
			height: 40vh;
			width: 100%;
			font-family: 'Cascadia Code', Consolas, monospace;
			font-size: 14px;
		}
	</style>
</head>
<body onload='main();'>
	<h1>SVG Path Command Converter Tool</h1>
	<div>
		Drag-and-drop or specify a SVG file, and this tool will do a bunch of stuff that 
		makes the drawing commands in the <pre>d</pre> attribute of <pre>path</pre> tags easier to read by humans.
		Read more on <a href="https://github.com/mattlag/SVG-Path-Command" target=_new>github.com/mattlag/SVG-Path-Command</a>.
	</div>
	<div>
		<h3>Conversion options</h3>

		<span class="option">
			<input type="checkbox" checked id="check-addLineBreaks" onchange="refresh();">&nbsp;<label for="check-addLineBreaks">Add&nbsp;line&nbsp;breaks</label>&emsp;
		</span>
		<span class="option">
			<input type="checkbox" checked id="check-splitChains" onchange="refresh();">&nbsp;<label for="check-splitChains">Split&nbsp;command&nbsp;chains</label>&emsp;
		</span>
		<span class="option">
			<input type="checkbox" checked id="check-convertLines" onchange="refresh();">&nbsp;<label for="check-convertLines">Convert&nbsp;shorthand&nbsp;lines</label>&emsp;
		</span>
		<span class="option">
			<input type="checkbox" checked id="check-convertSmooth" onchange="refresh();">&nbsp;<label for="check-convertSmooth">Convert&nbsp;smooth&nbsp;Beziers&nbsp;to&nbsp;standard</label>&emsp;
		</span>
		<span class="option">
			<input type="checkbox" checked id="check-convertQuadraticToCubic" onchange="refresh();">&nbsp;<label for="check-convertQuadraticToCubic">Convert&nbsp;quadratic&nbsp;Beziers&nbsp;to&nbsp;cubic</label>&emsp;
		</span>
		<span class="option">
			<input type="checkbox" checked id="check-convertArcToCubic" onchange="refresh();">&nbsp;<label for="check-convertArcToCubic">Convert&nbsp;Arcs&nbsp;to&nbsp;cubic&nbsp;Beziers</label>&emsp;
		</span>
		<span class="option">
			<input type="checkbox" checked id="check-correctFloatingPoint" onchange="refresh();">&nbsp;<label for="check-correctFloatingPoint">Round&nbsp;floating&nbsp;point&nbsp;math&nbsp;errors</label>&emsp;
		</span>
	</div>
	<button id="toggle-original" onclick="toggleView('original');">Original</button><button selected id="toggle-converted" onclick="toggleView('converted');">Converted</button>
	<div id="target"></div>
</body>
</html>